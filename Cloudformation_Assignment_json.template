{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "AWS CloudFormation Template to deploy web application on linux and windows workload. Create a load balanced, Auto Scaled website in an existing Virtual Private Cloud (VPC). This template creates an Auto Scaling group behind a load balancer with a simple health check using a AMI. The web site is available on port 80. This template creates one or more Amazon EC2 instances and an Application Load Balancer. You will be billed for the AWS resources used if you create a stack from this template.",
    "Parameters": {
        "VpcId": {
            "Type": "AWS::EC2::VPC::Id",
            "Description": "VpcId of your existing Virtual Private Cloud (VPC)",
            "ConstraintDescription": "must be the VPC Id of an existing Virtual Private Cloud."
        },
        "ELBSubnets": {
            "Type": "List<AWS::EC2::Subnet::Id>",
            "Description": "Select the The list of SubnetIds in your VPC zone ap-southeast-1a",
            "ConstraintDescription": "The subent should be residing in the selected VPC zone."
        },
        "Subnet1": {
            "Type": "AWS::EC2::Subnet::Id",
            "Description": "Select the The list of SubnetIds in your VPC zone ap-southeast-1a",
            "ConstraintDescription": "The subent should be residing in the selected ap-southeast-1a  VPC zone."
        },
        "Subnet2": {
            "Type": "AWS::EC2::Subnet::Id",
            "Description": "Select the The list of SubnetIds in your VPC zone ap-southeast-1b",
            "ConstraintDescription": "The subent should be residing in the selected ap-southeast-1b  VPC zone."
        },
        "KeyName": {
            "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances",
            "Type": "AWS::EC2::KeyPair::KeyName",
            "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
        },
        "SSHLocation": {
            "Description": "Lockdown SSH access to the bastion host (default can be accessed from anywhere)",
            "Type": "String",
            "MinLength": "9",
            "MaxLength": "18",
            "Default": "0.0.0.0/0",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "must be a valid CIDR range of the form x.x.x.x/x."
        },
        "InstanceType": {
            "Description": "WebServer EC2 instance type",
            "Type": "String",
            "Default": "t2.micro",
            "AllowedValues": [
                "t1.micro",
                "t2.nano",
                "t2.micro",
                "t2.small",
                "t2.medium",
                "t2.large",
                "m1.small",
                "m1.medium",
                "m1.large",
                "m1.xlarge",
                "m2.xlarge",
                "m2.2xlarge",
                "m2.4xlarge",
                "m3.medium",
                "m3.large",
                "m3.xlarge",
                "m3.2xlarge",
                "m4.large",
                "m4.xlarge",
                "m4.2xlarge",
                "m4.4xlarge",
                "m4.10xlarge",
                "c1.medium",
                "c1.xlarge",
                "c3.large",
                "c3.xlarge",
                "c3.2xlarge",
                "c3.4xlarge",
                "c3.8xlarge",
                "c4.large",
                "c4.xlarge",
                "c4.2xlarge",
                "c4.4xlarge",
                "c4.8xlarge",
                "g2.2xlarge",
                "g2.8xlarge",
                "r3.large",
                "r3.xlarge",
                "r3.2xlarge",
                "r3.4xlarge",
                "r3.8xlarge",
                "i2.xlarge",
                "i2.2xlarge",
                "i2.4xlarge",
                "i2.8xlarge",
                "d2.xlarge",
                "d2.2xlarge",
                "d2.4xlarge",
                "d2.8xlarge",
                "hi1.4xlarge",
                "hs1.8xlarge",
                "cr1.8xlarge",
                "cc2.8xlarge",
                "cg1.4xlarge"
            ],
            "ConstraintDescription": "must be a valid EC2 instance type."
        },
        "InstanceCount": {
            "Description": "Number of EC2 instances to launch",
            "Type": "Number",
            "Default": "1"
        }
    },
    "Resources": {
        "WebSrvLinuxGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "VPCZoneIdentifier": [
                    {
                        "Ref": "Subnet1"
                    }
                ],
                "AvailabilityZones": [
                    "ap-southeast-1a"
                ],
                "LaunchConfigurationName": {
                    "Ref": "LinuxLaunchConfig"
                },
                "MinSize": "1",
                "MaxSize": "2",
                "Cooldown": "300",
                "HealthCheckGracePeriod": "300",
                "HealthCheckType": "ELB",
                "DesiredCapacity": {
                    "Ref": "InstanceCount"
                },
                "TerminationPolicies": [
                    "Default"
                ],
                "TargetGroupARNs": [
                    {
                        "Ref": "ALBTargetGroup"
                    }
                ]
            }
        },
        "WebSrvWinGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "VPCZoneIdentifier": [
                    {
                        "Ref": "Subnet2"
                    }
                ],
                "AvailabilityZones": [
                    "ap-southeast-1b"
                ],
                "LaunchConfigurationName": {
                    "Ref": "WinLaunchConfig"
                },
                "MinSize": "1",
                "MaxSize": "2",
                "HealthCheckGracePeriod": "300",
                "HealthCheckType": "ELB",
                "DesiredCapacity": {
                    "Ref": "InstanceCount"
                },
                "TerminationPolicies": [
                    "Default"
                ],
                "TargetGroupARNs": [
                    {
                        "Ref": "ALBTargetGroup"
                    }
                ]
            }
        },
        "LinuxLaunchConfig": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Metadata": {
                "Comment": "Install a simple web application"
            },
            "Properties": {
                "AssociatePublicIpAddress": "true",
                "ImageId": "ami-0cbc6aae997c6538a",
                "SecurityGroups": [
                    {
                        "Ref": "LinuxInstanceSecurityGroup"
                    }
                ],
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/xvda",
                        "Ebs": {
                            "VolumeSize": 8
                        }
                    },
                    {
                        "DeviceName": "/dev/sdb",
                        "Ebs": {
                            "VolumeSize": 1
                        }
                    }
                ],
                "KeyName": {
                    "Ref": "KeyName"
                },
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -xe\n",
                                "sudo amazon-linux-extras install -y ansible2\n",
                                "wget https://ansiblep-playbooks-assignment.s3-ap-southeast-1.amazonaws.com/webserver_playbook.yaml\n",
                                "ansible-playbook /webserver_playbook.yaml\n"
                            ]
                        ]
                    }
                }
            }
        },
        "WinLaunchConfig": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Metadata": {
                "Comment": "Install a simple web application"
            },
            "Properties": {
                "AssociatePublicIpAddress": "true",
                "ImageId": "ami-0f2866fc0244e2798",
                "SecurityGroups": [
                    {
                        "Ref": "WinInstanceSecurityGroup"
                    }
                ],
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "xvdb",
                        "Ebs": {
                            "VolumeSize": 1
                        }
                    },
                    {
                        "DeviceName": "/dev/sda1",
                        "Ebs": {
                            "VolumeSize": 30
                        }
                    }
                ],
                "KeyName": {
                    "Ref": "KeyName"
                },
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "<powershell>\n",
                                " net user Administrator \"admin@1234\"\n",
                                " $InetPubRoot = \"D:\\inetpub\"\n",
                                " $InetPubLog = \"D:\\inetpub\\Log\"\n",
                                " $InetPubWWWRoot = \"D:\\inetpub\\wwwroot\"\n",
                                " Initialize-Disk -Number 1\n",
                                "",
                                " New-Partition -DiskNumber 1 -UseMaximumSize -AssignDriveLetter | Format-Volume -FileSystem NTFS -NewFileSystemLabel webdrive\n",
                                " Install-WindowsFeature -name Web-Server,Web-Common-Http -IncludeManagementTools\n",
                                " New-Item -Path $InetPubRoot -type directory -Force -ErrorAction SilentlyContinue\n",
                                " New-Item -Path $InetPubLog -type directory -Force -ErrorAction SilentlyContinue\n",
                                " New-Item -Path $InetPubWWWRoot -type directory -Force -ErrorAction SilentlyContinue\n",
                                " $Command = \"%windir%\\system32\\inetsrv\\appcmd set config ",
                                " -section:system.applicationHost/sites -siteDefaults.logfile.directory:$InetPubLog\"\n",
                                " cmd.exe /c $Command\n",
                                " $Command = \"%windir%\\system32\\inetsrv\\appcmd set config ",
                                " -section:system.applicationHost/log -centralBinaryLogFile.directory:$InetPubLog\"\n",
                                " cmd.exe /c $Command\n",
                                " $Command = \"%windir%\\system32\\inetsrv\\appcmd set config ",
                                " -section:system.applicationHost/log -centralW3CLogFile.directory:$InetPubLog\"\n",
                                " cmd.exe /c $Command\n",
                                " c:\\Windows\\system32\\inetsrv\\appcmd set vdirs \"Default Web Site/\" ",
                                " /physicalpath:\"D:\\inetpub\\wwwroot\"\n",
                                " $Command = \"IISRESET\"\n",
                                " Invoke-Expression -Command $Command\n",
                                " New-Item g:\\inetpub\\wwwroot\\index.html -ItemType File\n",
                                " Set-Content D:\\inetpub\\wwwroot\\index.html \"<html><body><h1>Hello AWS World - running on Windows - on port 80</h1>",
                                "<img src='http://d3v4fqp7r6bc6k.cloudfront.net/screen-shot1.png' height='500' width='500'>",
                                "<br/><img src='http://d3v4fqp7r6bc6k.cloudfront.net/screen-shot2.png' height='500' width='500'>",
                                "<br/><img src='http://d3v4fqp7r6bc6k.cloudfront.net/screen-shot3.png' height='500' width='500'>",
                                "</body></html>\"\n",
                                "</powershell>"
                            ]
                        ]
                    }
                }
            }
        },
        "ApplicationLoadBalancer": {
            "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
            "Properties": {
                "Subnets": {
                    "Ref": "ELBSubnets"
                },
                "SecurityGroups": [
                    {
                        "Ref": "LoadBalancerSecurityGroup"
                    }
                ]
            }
        },
        "ALBListener": {
            "Type": "AWS::ElasticLoadBalancingV2::Listener",
            "Properties": {
                "DefaultActions": [
                    {
                        "Type": "forward",
                        "TargetGroupArn": {
                            "Ref": "ALBTargetGroup"
                        }
                    }
                ],
                "LoadBalancerArn": {
                    "Ref": "ApplicationLoadBalancer"
                },
                "Port": "80",
                "Protocol": "HTTP"
            }
        },
        "ALBTargetGroup": {
            "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
            "Properties": {
                "HealthCheckIntervalSeconds": 30,
                "HealthCheckTimeoutSeconds": 25,
                "HealthyThresholdCount": 2,
                "Port": 80,
                "Protocol": "HTTP",
                "UnhealthyThresholdCount": 2,
                "VpcId": {
                    "Ref": "VpcId"
                }
            }
        },
        "LoadBalancerSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Enable HTTP access on port 80",
                "VpcId": {
                    "Ref": "VpcId"
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "CidrIp": "0.0.0.0/0"
                    }
                ],
                "SecurityGroupEgress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "CidrIp": "0.0.0.0/0"
                    }
                ]
            }
        },
        "LinuxInstanceSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Enable HTTP access and SSH access",
                "VpcId": {
                    "Ref": "VpcId"
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "SourceSecurityGroupId": {
                            "Ref": "LoadBalancerSecurityGroup"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": {
                            "Ref": "SSHLocation"
                        }
                    }
                ]
            }
        },
        "WinInstanceSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Enable HTTP access and SSH access",
                "VpcId": {
                    "Ref": "VpcId"
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "SourceSecurityGroupId": {
                            "Ref": "LoadBalancerSecurityGroup"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "3389",
                        "ToPort": "3389",
                        "CidrIp": {
                            "Ref": "SSHLocation"
                        }
                    }
                ]
            }
        }
    },
    "Outputs": {
        "URL": {
            "Description": "URL of the website",
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        "http://",
                        {
                            "Fn::GetAtt": [
                                "ApplicationLoadBalancer",
                                "DNSName"
                            ]
                        }
                    ]
                ]
            }
        }
    }
}